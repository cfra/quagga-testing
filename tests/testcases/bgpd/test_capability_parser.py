from testutils import expect
from testutils import requires

def run_test():
    program = expect.spawn('./testcases/bgpd/test_capability_parser 2>/dev/null')
    program.set_requirements(requires.bgpd)

    yield program.multiline_test("MP4: MP IP/Uni")
    yield program.multiline_test("MPv6: MP IPv6/Uni", requirements=requires.ipv6)
    yield program.multiline_test("MP2: MP IP/Multicast")
    yield program.multiline_test("MP3: MP IP6/MPLS-labeled VPN", requirements=requires.ipv6)
    yield program.multiline_test("MP5: MP IP6/MPLS-VPN", requirements=requires.ipv6)
    yield program.multiline_test("MP6: MP IP4/MPLS-laveled VPN")
    yield program.multiline_test("MP8: MP unknown AFI/SAFI")
    yield program.multiline_test("MP-short: MP IP4/Unicast, length too short (< minimum)")
    yield program.multiline_test("MP-overflow: MP IP4/Unicast, length too long")
    yield program.multiline_test("caphdr: capability header, and no more")
    yield program.multiline_test("nodata: header, no data but length says there is")
    yield program.multiline_test("padded: valid, with padding")
    yield program.multiline_test("minsize: violates minsize requirement")
    yield program.multiline_test("ORF: ORF, simple, single entry, single tuple")
    yield program.multiline_test("ORF-many: ORF, multi entry/tuple")
    yield program.multiline_test("ORFlo: ORF, multi entry/tuple, hdr length too short")
    yield program.multiline_test("ORFlu: ORF, multi entry/tuple, length too long")
    yield program.multiline_test("ORFnu: ORF, multi entry/tuple, entry number too long")
    yield program.multiline_test("ORFno: ORF, multi entry/tuple, entry number too short")
    yield program.multiline_test("ORFpad: ORF, multi entry/tuple, padded to align")
    yield program.multiline_test("AS4: AS4 capability")
    yield program.multiline_test("GR: GR capability")
    yield program.multiline_test("GR-short: GR capability, but header length too short")
    yield program.multiline_test("GR-long: GR capability, but header length too long")
    yield program.multiline_test("GR-trunc: GR capability, but truncated")
    yield program.multiline_test("GR-empty: GR capability, but empty.")
    yield program.multiline_test("MP-empty: MP capability, but empty.")
    yield program.multiline_test("ORF-empty: ORF capability, but empty.")
    yield program.multiline_test("AS4-empty: AS4 capability, but empty.")
    yield program.multiline_test("dyn-empty: Dynamic capability, but empty.")
    yield program.multiline_test("dyn-old: Dynamic capability (deprecated version)")
    yield program.multiline_test("Cap-singlets: One capability per Optional-Param")
    yield program.multiline_test("Cap-series: Series of capability, one Optional-Param")
    yield program.multiline_test("AS4more: AS4 capability after other caps (singlets)")
    yield program.multiline_test("AS4series: AS4 capability, in series of capabilities")
    yield program.multiline_test("AS4real: AS4 capability, in series of capabilities")
    yield program.multiline_test("AS4real2: AS4 capability, in series of capabilities")
    yield program.multiline_test("DynCap: Dynamic Capability Message, IP/Multicast")
    yield program.multiline_test("DynCapLong: Dynamic Capability Message, IP/Multicast, truncated")
    yield program.multiline_test("DynCapPadded: Dynamic Capability Message, IP/Multicast, padded")
    yield program.multiline_test("DynCapMPCpadded: Dynamic Capability Message, IP/Multicast, cap data padded")
    yield program.multiline_test("DynCapMPCoverflow: Dynamic Capability Message, IP/Multicast, cap data != length")


    yield program.finish(requirements=requires.ipv6)
